#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

typedef long long int LD;
#define maxn 2011

using namespace std;

#define MO 1000000007
inline int mul_mod(int a,int b){
  int ret;
  __asm__ __volatile__ ("\tmull %%ebx\n\tdivl %%ecx\n"
                        :"=d"(ret):"a"(a),"b"(b),"c"(MO));
  return ret;
}

struct Reverse {
  static const int div = 1000000007;
  LD pow(LD a,LD n) {
    LD ans = 1, now = a;
    while(n) {
      if(n&1) {
        ans *= now; ans %= div;
      }
      now *= now;
      now%=div;
      n>>=1;
    }
    return ans;
  }

  LD reverse(LD a) {
    return pow(a, div - 2);
  }
} r1;

struct Cn {
  static const long long int div = 1000000007;
  LD p[maxn];
  LD revp[maxn];
  LD ans [maxn];
  int n;
  void init(int nn, Reverse* r) {
    n = nn;
    int i;
    p[0] = revp[0] = 1;
    for(i=1;i<=n;i++) {
      p[i] = (p[i-1] * i) % div;
      revp[i] = r->reverse(p[i]);
    }

    for(i=0;i<=n;i++) {
      ans[i]= CC(i);
    }
  }
  LD CC(int a) {
    LD ans = p[n];
    ans *= revp[a];
    ans %= div;
    ans *= revp[n-a];
    ans %= div;
    return ans;
  }
  LD Cij(int i, int j) {
    if(i>j)
      return 0;
    LD ans = p[j];
    ans *= revp[i];
    ans %= div;
    ans *= revp[j-i];
    ans %= div;
    return ans;
  }
  LD C(int a) {
    return ans[a];
  }
} cn;

class AlmostEulerianGraph {
  static const long long int div = 1000000007;
 public:
  LD E(int n) {
    return r1.pow(2, (n-1)*(n-2)/2);
  }

  LD B[maxn];

  void makeB(int n) {
    int i,j;
    B[1] = 1;
    for(i=2;i<=n;i++) {
      B[i] = E(i);
      for(j=1;j<i;j++) {
        LD now = B[j];
        now = mul_mod(now, cn.Cij(j-1, i-1));
        now = mul_mod(now, E(i-j));
        B[i] -= now;
        if(B[i] < 0)
          B[i] += div;
      }
    }
  }

  void make(int n) {
    makeB(n);
  }
  int calculateGraphs(int n) {
    cn.init(n, &r1);
    make(n);
    LD ans = B[n];
    ans = mul_mod(ans, cn.C(2) + 1);
    return ans;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
  cout << "Test " << testNum << ": [" << p0;
  cout << "]" << endl;
  AlmostEulerianGraph *obj;
  int answer;
  obj = new AlmostEulerianGraph();
  clock_t startTime = clock();
  answer = obj->calculateGraphs(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  int p0;
  int p1;

  {
    // ----- test 0 -----
    p0 = 3;
    p1 = 4;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 2;
    p1 = 0;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 42;
    p1 = 29010676;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
