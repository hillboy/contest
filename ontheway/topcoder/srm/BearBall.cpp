#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

#define forn(x) for(x=0;x<n;x++)

int myabs(int a) {
  return a<0?-a:a;
}

int gcd(int a, int b) {
  if(a>b)
    return gcd(b,a);
  if(a==0)
    return b;
  return gcd(b%a, a);
}
#define maxn 2000

pair<int, int> p[maxn];

int i,j,n,m;

typedef pair<int, int> point;

pair<int, int> del(pair<int,int>& a, pair<int,int>& b) {
  return make_pair(b.first-a.first, b.second-a.second);
}

void fix(point& delta) {
  int g = gcd(myabs(delta.first), myabs(delta.second));
  if(g==0) {
    printf("ha?\n");
    return;
  }
  delta.first/=g;delta.second/=g;
}

set<point> all;

class BearBall {
 public:
  int countThrows(vector <int> x, vector <int> y) {
    n=x.size();
    forn(i) {
      p[i] = make_pair(x[i], y[i]);
    }

    sort(p, p+n);
    point delta, now;
    bool same = true;
    forn(i) {
      if(i) {
        delta = del(p[0], p[i]);
        fix(delta);
        if(i==1)
          now=delta;
        else {
          if(now!=delta) {
            same = false;
          }
        }
      }
    }
    if(same) {
      int ans = 0;
      for(i=1,j=n-1;i<n;i++,j--) {
        ans+=i*j;
      }
      return ans*2;
    }
    int ans=0;
    forn(i) {
      all.clear();
      forn(j) {
        if(i!=j) {
          delta = del(p[i], p[j]);
          fix(delta);
          if(all.insert(delta).second) {
            ans++;
          } else {
            ans+=2;
          }
        }
      }
    }
    return ans;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  BearBall *obj;
  int answer;
  obj = new BearBall();
  clock_t startTime = clock();
  answer = obj->countThrows(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  vector <int> p0;
  vector <int> p1;
  int p2;

  {
    // ----- test 0 -----
    int t0[] = {1,4,2};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {1,10,7};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 6;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    int t0[] = {0,0,0,1,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {0,1,2,0,1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 22;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    int t0[] = {5,7,9,11};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {4,3,2,1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 20;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    int t0[] = {10,10,50,50,90,90};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {5,17,5,17,5,17};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 34;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    int t0[] = {-100,-90,-80,-70,-85,-90,0,20};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    int t1[] = {-5,-8,-13,-21,-13,-13,-13,-69};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 68;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
