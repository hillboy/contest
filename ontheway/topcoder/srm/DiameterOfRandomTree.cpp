#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;
#define maxn 103

typedef long long int LD;

int i,j,n,m,dm;

int g[maxn][maxn];

LD p[maxn][maxn],sum[maxn][maxn];

LD h[60];

inline void addE(int a,int b) {
  g[a][++g[a][0]] = b;
}

void dfs(int a,int fa) {
  int ii,i,j;
  for(ii=g[a][0];ii;ii--) if(g[a][ii]!=fa){
    dfs(g[a][ii],a);
  }
  LD tmp,t,tmp2,tt;
  for(i=0;i<=dm;i++) {
    j=dm-i;
    if(j<i) {
      t=1;
      tt=1;
      int zero = 0;
      for(ii=g[a][0];ii;ii--) if(g[a][ii]!=fa){
        tmp = 0;
        if(j>=1)
          tmp += sum[g[a][ii]][j-1];
        if(j>=2)
          tmp += sum[g[a][ii]][j-2];
        if(tmp == 0)
          zero ++;
        else {
          tt*=tmp;
        }
        t*=tmp;
      }
      p[a][i] = 0;
      if(zero>1)
        continue;

      for(ii=g[a][0];ii;ii--) if(g[a][ii]!=fa){
        tmp = 0;
        if(j>=1)
          tmp += sum[g[a][ii]][j-1];
        if(j>=2)
          tmp += sum[g[a][ii]][j-2];
        tmp2 = 0;
        if(i>=1)
          tmp2 += p[g[a][ii]][i-1];
        if(i>=2)
          tmp2 += p[g[a][ii]][i-2];
        if(zero == 1&&tmp ==0) {
          p[a][i] += tt * tmp2;
        } else if(tmp) {
          p[a][i] += t/tmp  * (tmp2);
        }
      }
    } else {
      // i<=j
      p[a][i]=1;
      t=1;tt=1;
      int zero = 0;
      for(ii=g[a][0];ii;ii--) if(g[a][ii]!=fa){
        zero++;
        tmp = 0;
        tmp2 = 0;
        if(i>=1)
          tmp += sum[g[a][ii]][i-1];
        if(i>=2)
          tmp += sum[g[a][ii]][i-2], tmp2 += sum[g[a][ii]][i-2];
        if(i>=3)
          tmp2 += sum[g[a][ii]][i-3];
        t*=tmp;
        tt*=tmp2;
      }
      if(zero ==0 && i==0) {
        // leaf
        p[a][i]=1;
      } else
        p[a][i] = t - tt;
    }
  }
  sum[a][0]=p[a][0];
  for(i=1;i<=dm;i++) {
    sum[a][i] = sum[a][i-1] + p[a][i];
  }
}


class DiameterOfRandomTree {
public:
	double getExpectation(vector <int> a, vector <int> b) {
    h[0]=1;
    for(i=1;i<60;i++)h[i]=h[i-1]+h[i-1];
    n=a.size() + 1;
    for(i=0;i<=n;i++) {
      g[i][0]=0;
    }
    for(i=0;i<(int)a.size();i++) {
      addE(a[i],b[i]);
      addE(b[i],a[i]);
    }
    double ans = 0, tmp,last=0;
    for(dm=0;dm<n+n;dm++) {
      memset(p,0,sizeof(p));
      dfs(0,-1);
      tmp = sum[0][dm] - last;
      last=sum[0][dm];
      tmp*=dm;
      ans+=tmp;
    }
		return ans/h[n-1];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	DiameterOfRandomTree *obj;
	double answer;
	obj = new DiameterOfRandomTree();
	clock_t startTime = clock();
	answer = obj->getExpectation(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	double p2;
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3.375;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 0 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3.375;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,0,1,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6.25;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,0,0,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6,7,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3.9609375;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,0,1,2,3,5,6,8};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6,7,8,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10.53125;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
