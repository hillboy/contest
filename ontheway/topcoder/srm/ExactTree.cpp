#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>
using namespace std;
#define maxn 100


int i,j,n,m;

struct point {
  int p[maxn];
  void output() {
    int i;
    for(i=0;i<m;i++)
      if(p[i]>=0) {
        printf("(%d %d)\n", i, p[i]);
      }
  }
}p[51][51];


bool checked[51][51];


void make(int fa, int n) {
  if(checked[fa][n]) {
    return;
  }
  checked[fa][n]=true;
  if(n==1) {
    int i;
    for(i=0;i<m;i++) {
      p[fa][n].p[i] = 0;
    }
    return;
  }
  int i,ii,jj,now;
  for(i=1;i<n;i++) {
    make(fa+i, n - i);
    make(fa+n-i, i);
    for(ii=0;ii<m;ii++) {
      if(p[fa+i][n-i].p[ii]>=0) {
        for(jj=0;jj<m;jj++) {
          if(p[fa+n-i][i].p[jj]>=0) {
            now=p[fa+i][n-i].p[ii]+p[fa+n-i][i].p[jj]+i*(fa+n-i);
            if(p[fa][n].p[now%m] < 0 || p[fa][n].p[now%m] > now) {
              p[fa][n].p[now%m] = now;
            }
          }
        }
      }
    }
  }
}

class ExactTree {
 public:
  int getTree(int n, int m, int r) {
    ::n = n;
    ::m = m;
    memset(checked, 0, sizeof(checked));
    memset(p, -1, sizeof(p));
    make(0, n);
    return p[0][n].p[r];
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
  cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
  cout << "]" << endl;
  ExactTree *obj;
  int answer;
  obj = new ExactTree();
  clock_t startTime = clock();
  answer = obj->getTree(p0, p1, p2);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p3 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p3;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  int p0;
  int p1;
  int p2;
  int p3;

  {
    // ----- test 0 -----
    p0 = 4;
    p1 = 100;
    p2 = 9;
    p3 = 9;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }


  {
    // ----- test 1 -----
    p0 = 4;
    p1 = 100;
    p2 = 10;
    p3 = 10;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 4;
    p1 = 100;
    p2 = 0;
    p3 = -1;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 6;
    p1 = 2;
    p2 = 0;
    p3 = 28;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = 6;
    p1 = 2;
    p2 = 1;
    p3 = 25;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 5 -----
    p0 = 25;
    p1 = 100;
    p2 = 0;
    p3 = 700;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  {
    // ----- test 6 -----
    p0 = 50;
    p1 = 97;
    p2 = 89;
    p3 = 2708;
    all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
