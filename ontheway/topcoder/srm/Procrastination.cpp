#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;

#define maxn 10000000

set<long long int> p;

set<long long int> pp;

long long int low, now;

void put(long long int n) {
  if(pp.find(n) != pp.end()) {
    return;
  }
  pp.insert(n);
  long long int i = 2, j;
  while(i*i <=n) {
    if((n%i)==0) {
      if(i>low) {
        if(p.find(i) == p.end()) {
          p.insert(i);
        }
      }
      j=n/i;
      if(j>low) {
        if(p.find(j) == p.end()) {
          p.insert(j);
        }
      }
    }
    i++;
  }
}


class Procrastination {
 public:
  long long findFinalAssignee(long long n) {
    p.clear();
    pp.clear();
    low=1;
    now=n;
    put(n);
    if(n>2)
      put(n-1);
    set<long long int>::iterator ii;
    while(1) {
      ii=p.begin();
      if(ii==p.end())
        break;
      low=*ii;
      if(low >= now)
        break;
      p.erase(ii);
      if((now-1) > low && ((now-1)%low) == 0) {
        now--;
        put(now);
        if (now > 2)
          put(now-1);
        continue;
      }
      if((now%low)==0) {
        now++;
        put(now);
        if (now > 2)
          put(now-1);
      }
    }
    return now;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
  cout << "Test " << testNum << ": [" << p0;
  cout << "]" << endl;
  Procrastination *obj;
  long long answer;
  obj = new Procrastination();
  clock_t startTime = clock();
  answer = obj->findFinalAssignee(p0);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p1 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p1;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  long long p0;
  long long p1;
  {
    // ----- test 4 -----
    p0 = 5;
    p1 = 4;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 0 -----
    p0 = 3ll;
    p1 = 3ll;
    all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    p0 = 8ll;
    p1 = 11ll;
    all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    p0 = 20ll;
    p1 = 20ll;
    all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    p0 = 196248ll;
    p1 = 196259ll;
    all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
    // ------------------
  }

  {
    // ----- test 4 -----
    p0 = 5587021440ll;
    p1 = 5587021440ll;
    all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
