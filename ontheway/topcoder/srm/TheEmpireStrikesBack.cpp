#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define maxn 101010
#define div 1000000007

pair<int, int> p[maxn],q[maxn];

int i,j,n,m,t;

int checkit(long long int a) {
  if(a>div) {
    return 1;
  }
  int i,j=0;
  for(i=0;i<n;i++) {
    while(p[j].second-a > p[i].second) {
      j++;
    }
    q[i].first = j;
  }
  j=n-1;
  for(i=n-1;i>=0;i--) {
    while(p[j].first - a > p[i].first) {
      j--;
    }
    q[i].second = j;
  }
  sort(q,q+n);
  int now = -1, ans = 0;
  j=0;
  for(i=0;i<n;i++) {
    if(now<i) {
      ans ++;
       while(j<n && q[j].first <= i) {
         if(q[j].second > now) 
           now = q[j].second;
         j++;
       }
    }
  }
  return ans;
}

int make() {
  long long l=0,r = div + 10,mid;
  while(l<=r) {
    mid = (l+r) / 2;
    if(checkit(mid) <= m) {
      r = mid -1;
    } else {
      l = mid + 1;
    }
  }
  return l;
}

class TheEmpireStrikesBack {
public:
	int find(int AX, int BX, int CX, int AY, int BY, int CY, int N, int M) {
    n = N;
    m = M;
    p[0].first = AX;
    p[0].second = AY;
    for(i=1;i<n;i++) {
      p[i].first = (((long long int) p[i-1].first) *BX + CX) % div;
      p[i].second = (((long long int) p[i-1].second) *BY + CY) % div;
    }
    sort(p,p+n);
    t=0;
    for(i=0;i<n;i++) {
      if(t==0) {
        q[t++]=p[i];
      } else {
        while(t>0 && q[t-1].first <= p[i].first && q[t-1].second <= p[i].second) {
          t--;
        }
        q[t++]=p[i];
      }
    }
    n=t;
    for(i=0;i<t;i++) {
      p[i]=q[i];
    }
    return make();
		return 0;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, bool hasAnswer, int p8) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7;
	cout << "]" << endl;
	TheEmpireStrikesBack *obj;
	int answer;
	obj = new TheEmpireStrikesBack();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3, p4, p5, p6, p7);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p8 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p8;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 2;
	p4 = 4;
	p5 = 1000000000;
	p6 = 2;
	p7 = 1;
	p8 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 2;
	p4 = 2;
	p5 = 2;
	p6 = 2;
	p7 = 1;
	p8 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 2;
	p4 = 4;
	p5 = 1000000000;
	p6 = 2;
	p7 = 1;
	p8 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 3;
	p2 = 8;
	p3 = 10000;
	p4 = 10;
	p5 = 999910000;
	p6 = 3;
	p7 = 1;
	p8 = 30;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 0;
	p1 = 0;
	p2 = 0;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 100000;
	p7 = 1000;
	p8 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 20;
	p2 = 30;
	p3 = 40;
	p4 = 50;
	p5 = 60;
	p6 = 100000;
	p7 = 10;
	p8 = 15720;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, true, p8) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
